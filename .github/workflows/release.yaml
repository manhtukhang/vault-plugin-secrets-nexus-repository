name: Secure Release

on:
  push:
    tags:
      - "v*" # triggers only if push new tag version, like `v0.8.4` or else

permissions:
  contents: read

jobs:
  goreleaser:
    permissions:
      contents: write # for goreleaser/goreleaser-action to create a GitHub release
    runs-on: ubuntu-latest
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
      project-name: ${{ steps.hash.outputs.project-name }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a # v5.2.0
        with:
          go-version-file: ./go.mod
          cache-dependency-path: ./go.sum

      - name: Run GoReleaser
        id: run-goreleaser
        uses: goreleaser/goreleaser-action@9ed2f89a662bf1735a48bc8557fd212fa902bebf # v6.1.0
        with:
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ github.ref_name }}

      - name: Generate subject
        id: hash
        env:
          ARTIFACTS: ${{ steps.run-goreleaser.outputs.artifacts }}
        run: |
          set -euo pipefail

          hashes="$(echo "${ARTIFACTS}" | jq --raw-output '.[] | {name, "digest": (.extra.Digest // .extra.Checksum)} | select(.digest) | {digest} + {name} | join(" ") | sub("^sha256:";"")' | base64 -w0)"

          echo "hashes=${hashes}" >> "${GITHUB_OUTPUT}"
          echo "project-name=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)" >> "${GITHUB_OUTPUT}"

  attestation:
    needs: [ goreleaser ]
    permissions:
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
      attestations: write # To upload attestations.
      contents: write # To download assets from draft release.
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Download artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROJECT_NAME: ${{ needs.goreleaser.outputs.project-name }}
          VERSION: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          gh release download "${VERSION}" -p "${PROJECT_NAME}_${VERSION}_*" -D ./artifacts

      - name: Generate artifacts attestation
        id: gen-att
        uses: actions/attest-build-provenance@7668571508540a607bdfd90a87a560489fe372eb # v2.1.0
        with:
          subject-path: "${{ github.workspace }}/artifacts/*"
      #
      # - name: Upload attestation
      #   uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
      #   with:
      #     draft: true
      #     tag_name: ${{ github.ref_name }}
      #     files: |
      #       ${{ steps.gen-att.outputs.bundle-path }}

  provenance:
    needs: [ goreleaser ]
    permissions:
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0 # Do not use tag
    with:
      base64-subjects: "${{ needs.goreleaser.outputs.hashes }}"
      provenance-name: "${{ needs.goreleaser.outputs.project-name }}_${{ github.ref_name }}.intoto.jsonl"
      upload-assets: true # upload to a new release
      draft-release: true

  verification:
    needs: [ goreleaser, attestation, provenance ]
    runs-on: ubuntu-latest
    permissions:
      contents: write # To download assets from draft release.
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Install the verifier
        uses: slsa-framework/slsa-verifier/actions/installer@3714a2a4684014deb874a0e737dffa0ee02dd647 # v2.6.0

      - name: Download assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROVENANCE: ${{ needs.provenance.outputs.provenance-name }}
          PROJECT_NAME: ${{ needs.goreleaser.outputs.project-name }}
          VERSION: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          gh release download "${VERSION}" -p "${PROJECT_NAME}_${VERSION}_*"
          gh release download "${VERSION}" -p "${PROVENANCE}"

      - name: Verify assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HASHES: ${{ needs.goreleaser.outputs.hashes }}
          PROVENANCE: "${{ needs.provenance.outputs.provenance-name }}"
          VERSION: ${{ github.ref_name }}
        run: |
          set -euo pipefail

          checksums="$(base64 -d <<< "${HASHES}")"
          while read -r line; do
              fn="$(echo "${line}" | cut -d ' ' -f2)"

              echo "Verifying ${fn} with GH CLI"
              gh attestation verify "${fn}" --repo "${GITHUB_REPOSITORY}"

              echo "Verifying ${fn} with slsa-verifier"
              slsa-verifier verify-artifact --provenance-path "${PROVENANCE}" \
                                            --source-uri "github.com/${GITHUB_REPOSITORY}" \
                                            --source-tag "${VERSION}" \
                                            "${fn}"
          done <<<"${checksums}"

  acceptance-test:
    needs: [ goreleaser, attestation, provenance ]
    permissions:
      contents: write # To download assets from draft release.
    strategy:
      matrix:
        vault: [ "1.17.6", "1.18.2" ]
        nexus: [ "3.73.0", "3.74.0" ]
    uses: ./.github/workflows/_test-acceptance.tmpl.yaml
    with:
      vault-version: ${{ matrix.vault }}
      nxr-version: ${{ matrix.nexus }}
      vault-plugin-dir: ./dist/bin

  if-succeed-publish-release:
    needs: [ verification, acceptance-test ]
    permissions:
      contents: write # To edit release.
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Publish release
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ github.ref_name }}
        run: |
          set -euo pipefail

          PRE_RELEASE="true"

          # Only allow semver format: v0.2.3 v1.2.3 v10.2.3
          if [[ "${VERSION}" =~ ^v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$ ]]; then
            PRE_RELEASE="false"
          fi

          gh release edit "${VERSION}" --draft=false --prerelease="${PRE_RELEASE}"

          # gh api --method POST \
          #        -H "Accept: application/vnd.github+json" \
          #        "/repos/${GITHUB_REPOSITORY}/releases/generate-notes" \
          #        -f "tag_name=${VERSION}" | jq -r '.body' > release-notes.md
          #
          # gh release edit "${VERSION}" --draft=false --prerelease="${PRE_RELEASE}" --notes-file=release-notes.md
